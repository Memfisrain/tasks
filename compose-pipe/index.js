// pipe(f1, f2, f3, ...) => (...args) => f3(f2(f1(...args)))const pipe = (firstFn, ...fns) => (...args) =>    fns.reduce( (acc, fn) => fn(acc), firstFn(...args))const pipeRec = (firstFn, ...fns) => (...args) =>    fns.length ?        pipeRec(...fns)( firstFn(...args) ) :        firstFn(...args)const upperCase = str => str.toUpperCase()const lowerCase = str => str.toLowerCase()const capitalize = str => `${str[0].toUpperCase()}${str.slice(1)}`const addExclamation = str => `${str}!`const addDash = str => `- ${str}`const str = 'THAT WAS A NICE DAY'const resultPipe = pipeRec(upperCase, lowerCase, capitalize, addExclamation)(str)console.log(resultPipe)// That was a nice day!// the steps we have://// upperCase(str)// lowerCase(upperCased)// capitalize(lowerCased)// addExclamation(capitalized)// compose(f1, f2, f3, ...) => (...args) => f1(f2(f3(...args)))const compose = (...fns) => (...args) =>    fns.slice(0, -1).reduceRight( (acc, fn) => fn(acc), fns[fns.length - 1](...args))const resultCompose = compose(upperCase, lowerCase, capitalize, addExclamation)(str)console.log(resultCompose)const composeRec = (fn, ...fns) => (...args) =>    fns.length ?        fn( composeRec( ...fns )(...args) ) :        fn(...args)const resultComposeRec = composeRec(upperCase, lowerCase, capitalize, addExclamation)(str)console.log(resultComposeRec)// THAT WAS A NICE DAY!const composeRecShort = (...fns) => fns.reduce( (f, g) => (...args) => f(g(...args)) )const resultComposeRecShort = composeRecShort(upperCase, lowerCase, capitalize, addExclamation)(str)console.log(resultComposeRecShort)